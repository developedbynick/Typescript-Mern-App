import type { ErrorRequestHandler } from "express";
import ApiError from "../utils/ApiError";
import capitalize from "capitalize";
type ErrorRequestHandlerCustom = ErrorRequestHandler<
  {},
  { status: ApiError["status"]; message: ApiError["message"] }
>;
const errorHandler: ErrorRequestHandlerCustom = (err: unknown, _, res, __) => {
  // In the case that error is not of type object
  if (!(typeof err === "object") || !err) {
    // Generic error message
    const error = "An unknown error has occurred. Devs have been notified";
    // Returning response to client
    return res.status(500).json({ status: "fail", message: error });
  }
  // In the case that the error was generated by the developer
  if (err instanceof ApiError) {
    res.status(err.statusCode).json({
      status: "fail",
      message: capitalize(err.message),
    });
  }
  // Checking if error property has the code and message property
  if ("code" in err && "message" in err) {
    // Defining error locally
    let { code, message } = err as { code: number; message: string };
    // Sending response to client
    return res.status(code).json({ status: "fail", message: message });
  }
};
export const DevelopmentErrorHandler: ErrorRequestHandler = (e, _, res, __) =>
  res.status(500).json({ error: e, message: e.message, stack: e.stack });

export default errorHandler;
